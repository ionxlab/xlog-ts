{"version":3,"file":"xlog.min.js","mappings":"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","sources":["webpack://XLog/webpack/universalModuleDefinition","webpack://XLog/./src/LogConfig.ts","webpack://XLog/./src/LogLevel.ts","webpack://XLog/./src/LogManager.ts","webpack://XLog/./src/Logger.ts","webpack://XLog/webpack/bootstrap","webpack://XLog/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"XLog\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"XLog\"] = factory();\n\telse\n\t\troot[\"XLog\"] = factory();\n})(this, function() {\nreturn ","/**\r\n * The LogConfig class\r\n */\r\nexport class LogConfig {\r\n  public printDate: boolean = true\r\n  public printTime: boolean = true\r\n  public printMilliTime: boolean = true\r\n  public printName: boolean = true\r\n  public printLevel: boolean = true\r\n  public printTag: boolean = true\r\n\r\n  /**\r\n   * Construct a LogConfig\r\n   * @param {boolean} printDate\r\n   * @param {boolean} printTime\r\n   * @param {boolean} printMilliTime\r\n   * @param {boolean} printName\r\n   * @param {boolean} printLevel\r\n   * @param {boolean} printTag\r\n   */\r\n  constructor(printDate?: boolean, printTime?: boolean, printMilliTime?: boolean, printName?: boolean, printLevel?: boolean, printTag?: boolean) {\r\n    if(printDate != null)\r\n      this.printDate = printDate;\r\n    if(printTime != null)\r\n      this.printTime = printTime;\r\n    if(printMilliTime != null)\r\n      this.printMilliTime = printMilliTime;\r\n    if(printName != null)\r\n      this.printName = printName;\r\n    if(printLevel != null)\r\n      this.printLevel = printLevel;\r\n    if(printTag != null)\r\n      this.printTag = printTag;\r\n  }\r\n}\r\n","/**\r\n * Enum for logger levels\r\n * @enum {number}\r\n */\r\nexport enum LogLevel {\r\n  MESSAGE,\r\n  ERROR,\r\n  WARNING,\r\n  INFO,\r\n  DEBUG,\r\n  VERBOSE\r\n}","import { LogLevel } from './LogLevel'\r\nimport { LogConfig } from './LogConfig'\r\nimport { Logger } from './Logger'\r\n\r\n/**\r\n * The LogManager class\r\n * Manage logger instances\r\n */\r\nexport class LogManager {\r\n  private name: string = null;\r\n  private config: LogConfig = new LogConfig();\r\n  private level: LogLevel = LogLevel.VERBOSE;\r\n  private loggers: Map<string, Logger> = new Map<string, Logger>();\r\n  private static instance: LogManager = null;\r\n\r\n  /**\r\n   * Construct a LogManager\r\n   * @param {string} name\r\n   * @param {LogLevel} level\r\n   * @param {LogConfig} config\r\n   */\r\n  constructor(name?: string, level?: LogLevel, config?: LogConfig) {\r\n    if(name != null)\r\n      this.name = name;\r\n    if(level != null)\r\n      this.level = level;\r\n    if(config != null)\r\n      this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Get the singleton instance of a LogManager\r\n   * @param {string} name\r\n   * @param {LogLevel} level\r\n   * @param {LogConfig} config\r\n   * @param {boolean} override\r\n   * @return {LogManager}\r\n   */\r\n  static getInstance(name?: string, level?: LogLevel, config?: LogConfig, override?: boolean): LogManager {\r\n    if(LogManager.instance===null || override) {\r\n      LogManager.instance = new LogManager(name, level, config);\r\n    }\r\n    return LogManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Return an instance of Logger\r\n   * @param {string} tag\r\n   * @param {LogLevel} level\r\n   * @param {boolean} override\r\n   * @return {Logger}\r\n   */\r\n  getLogger(tag: string, level?: LogLevel, override?: boolean): Logger {\r\n    if(!this.loggers.has(tag) || override)\r\n      this.loggers.set(tag, new Logger(this.name, tag, (level!==null ? level : this.level), this.config));\r\n\r\n    return this.loggers.get(tag);\r\n  };\r\n\r\n  /**\r\n   * Set log level\r\n   * @param {LogLevel} level - the log level\r\n   */\r\n  setLevel(level: LogLevel): void {\r\n    this.level = level;\r\n    Object.keys(this.loggers).forEach((key) => {\r\n      if(this.loggers[key])\r\n        this.loggers[key].setLevel(level);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Remove an instance of Logger\r\n   * @param {string} tag\r\n   */\r\n  removeLogger(tag: string): void {\r\n    this.loggers.delete(tag);\r\n  };\r\n\r\n  /**\r\n   * Remove all instances of Logger\r\n   */\r\n  removeLoggers(): void {\r\n    this.loggers.clear();\r\n  };\r\n}","import {LogLevel} from './LogLevel'\r\nimport {LogConfig} from './LogConfig'\r\n\r\n/**\r\n * The Logger class\r\n */\r\nexport class Logger {\r\n  private name: string = null;\r\n  private tag: string = null;\r\n  private config: LogConfig = new LogConfig();\r\n  private level: LogLevel = LogLevel.VERBOSE;\r\n  private static readonly consoles: string[] = [\"log\",\"error\",\"warn\",\"info\",\"debug\",\"debug\"];\r\n  private static readonly levels: string[] = ['m','e','w','i','d','v'];\r\n\r\n  /**\r\n   * Construct a Logger\r\n   * @param {string} name\r\n   * @param {string} tag\r\n   * @param {LogLevel} level\r\n   * @param {LogConfig} config\r\n   */\r\n  constructor(name?: string, tag?: string, level?: LogLevel, config?: LogConfig) {\r\n    if(name != null)\r\n      this.name = name;\r\n    if(tag != null)\r\n      this.tag = tag;\r\n    if(level != null)\r\n      this.level = level;\r\n    if(config != null)\r\n      this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Get log level\r\n   * @return {LogLevel}\r\n   */\r\n  getLevel(): LogLevel {\r\n    return this.level;\r\n  };\r\n\r\n  /**\r\n   * Set log level\r\n   * @param {LogLevel} level - the log level\r\n   */\r\n  setLevel(level: LogLevel): void {\r\n    this.level = level;\r\n  };\r\n\r\n  // ==========================================================================\r\n  // Helpers\r\n  // ==========================================================================\r\n\r\n  private static pad(n) {\r\n    return (n!=null && n<10 ? \"0\"+n : n);\r\n  }\r\n\r\n  private static getParsedDate(date: Date, separator?: string) {\r\n    const s = (separator? separator : \"\");\r\n    return \"\"+date.getFullYear()+s+Logger.pad(date.getMonth()+1)+s+Logger.pad(date.getDate());\r\n  }\r\n\r\n  private static getParsedTime(date: Date, milliseconds?: boolean, separator?: string) {\r\n    const s = (separator ? separator : \"\");\r\n    return \"\"+Logger.pad(date.getHours())+s+Logger.pad(date.getMinutes())+s+Logger.pad(date.getSeconds())+(milliseconds ? s+date.getMilliseconds(): '');\r\n  }\r\n\r\n  private static log(level: LogLevel, levelMax: LogLevel, name: string, tag: string, config: LogConfig, args: string[], printStack?: boolean) {\r\n    if(!Array.isArray(args))\r\n      args = [args];\r\n\r\n    // check if level of message is inferior or equal to the current log level\r\n    if(level <= levelMax) {\r\n      let argsOut = [];\r\n\r\n      let dateTime = \"\";\r\n      if(config.printDate)\r\n        dateTime += Logger.getParsedDate(new Date());\r\n      if(config.printTime)\r\n        dateTime += Logger.getParsedTime(new Date(), config.printMilliTime);\r\n      if(dateTime !== \"\")\r\n        argsOut.push(\"[\"+dateTime+\"]\");\r\n      if(config.printName && name)\r\n        argsOut.push(\"(\"+name+\")\");\r\n      if(config.printLevel)\r\n        argsOut.push(\"<\"+Logger.levels[level]+\">\");\r\n      if(config.printTag && tag)\r\n        argsOut.push(\"(\"+tag+\")\");\r\n\r\n      argsOut = argsOut.concat(args);\r\n\r\n      if(printStack) {\r\n        const err = new Error();\r\n        let s = err.stack;\r\n        for(let i=0; i<3; i++) {\r\n          s = s.substring(s.indexOf('\\n')+1);\r\n        }\r\n        argsOut.push(\"\\n\"+s);\r\n      }\r\n\r\n      console[Logger.consoles[level]].apply(console, argsOut);\r\n    }\r\n  }\r\n\r\n  // ==========================================================================\r\n  // Methods\r\n  // ==========================================================================\r\n\r\n  /**\r\n   * Log with message level\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  m(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.MESSAGE, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments));\r\n  }\r\n  /**\r\n   * Log with error level\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  e(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.ERROR, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments));\r\n  }\r\n  /**\r\n   * Log with warning level\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  w(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.WARNING, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments));\r\n  }\r\n  /**\r\n   * Log with info level\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  i(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.INFO, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments));\r\n  }\r\n  /**\r\n   * Log with debug level\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  d(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.DEBUG, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments));\r\n  }\r\n  /**\r\n   * Log with verbose level\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  v(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.VERBOSE, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments));\r\n  }\r\n\r\n  /**\r\n   * Log with message level and callstack\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  mS(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.MESSAGE, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments), true);\r\n  }\r\n  /**\r\n   * Log with error level and callstack\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  eS(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.ERROR, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments), true);\r\n  }\r\n  /**\r\n   * Log with warning level and callstack\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  wS(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.WARNING, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments), true);\r\n  }\r\n  /**\r\n   * Log with info level and callstack\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  iS(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.INFO, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments), true);\r\n  }\r\n  /**\r\n   * Log with debug level and callstack\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  dS(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.DEBUG, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments), true);\r\n  }\r\n  /**\r\n   * Log with verbose level and callstack\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  vS(arg?: any, ...args: any[]): void {\r\n    Logger.log(LogLevel.VERBOSE, this.level, this.name, this.tag, this.config, Array.prototype.slice.call(arguments), true);\r\n  }\r\n  /**\r\n   * Log raw message (equivalent to console.log)\r\n   * @param {any} arg\r\n   * @param {...string} args\r\n   */\r\n  raw(arg?: any, ...args: any[]): void {\r\n    console.log.apply(console, Array.prototype.slice.call(arguments));\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\r\nexport { LogManager } from './LogManager';\r\nexport { Logger } from './Logger';\r\nexport { LogConfig } from './LogConfig';\r\nexport { LogLevel } from './LogLevel';\r\n"],"names":["root","factory","exports","module","define","amd","this","constructor","printDate","printTime","printMilliTime","printName","printLevel","printTag","LogLevel","LogManager","name","level","config","LogConfig","VERBOSE","loggers","Map","static","override","instance","getLogger","tag","has","set","Logger","get","setLevel","Object","keys","forEach","key","removeLogger","delete","removeLoggers","clear","getLevel","n","date","separator","s","getFullYear","pad","getMonth","getDate","milliseconds","getHours","getMinutes","getSeconds","getMilliseconds","levelMax","args","printStack","Array","isArray","argsOut","dateTime","getParsedDate","Date","getParsedTime","push","levels","concat","Error","stack","i","substring","indexOf","console","consoles","apply","m","arg","log","MESSAGE","prototype","slice","call","arguments","e","ERROR","w","WARNING","INFO","d","DEBUG","v","mS","eS","wS","iS","dS","vS","raw","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}